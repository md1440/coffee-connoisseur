/* eslint-disable react/destructuring-assignment */
import { GetStaticPropsContext, GetStaticPropsResult } from "next";
import Head from "next/head";
import Image from "next/image";
import { ReactElement, useEffect, useState } from "react";
import Banner from "../components/Banner";
import Card from "../components/Card";
import { useLatLongStoreContext } from "../hooks/use-store-context";
import useTrackLocation from "../hooks/use-track-location";
import fetchCoffeeStores from "../lib/coffee-stores-api";
import { CoffeeStore } from "../lib/types/types";
import styles from "../styles/Home.module.css";

interface Props {
	coffeeStores: CoffeeStore[];
}

export async function getStaticProps(context: GetStaticPropsContext): Promise<GetStaticPropsResult<Props>> {
	const coffeeStores: CoffeeStore[] = await fetchCoffeeStores();
	return {
		props: {
			coffeeStores,
		}, // will be passed to the page component as props
	};
}

function Home({ coffeeStores }: Props): ReactElement {
	const { handleTrackLocation, locationErrMsg, isFindingLocation } = useTrackLocation();
	const [coffeeStoresErr, setCoffeeStoresErr] = useState<null | string>(null);
	const { store, dispatch } = useLatLongStoreContext();
	const localCoffeeStores = store.coffeeStores;
	const { latLong } = store;

	// eslint-disable-next-line react-hooks/exhaustive-deps
	useEffect(() => {
		const setCoffeeStoresByLocation = async () => {
			if (latLong) {
				try {
					const fetchData = async () => {
						const clientFetchedCoffeeStores = await fetchCoffeeStores(latLong, "coffee", 30);
						return clientFetchedCoffeeStores;
					};
					const data: CoffeeStore[] = await fetchData();
					// setLocalCoffeestores(data);
					dispatch({
						type: "SetCoffeeStores",
						payload: { coffeeStores: data },
					});
					setCoffeeStoresErr("");
				} catch (err: any) {
					setCoffeeStoresErr(err.message);
				}
			}
		};
		setCoffeeStoresByLocation();
	}, [latLong, dispatch]);

	const handleOnBannerBtnClick = () => {
		handleTrackLocation();
	};

	return (
		<div className={styles.container}>
			<Head>
				<title>Coffee Connoisseur</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={styles.main}>
				<Banner
					buttonText={isFindingLocation ? "Locating..." : "View stores nearby"}
					handleOnClick={handleOnBannerBtnClick}
				/>
				{locationErrMsg && <p>Something went wrong: {locationErrMsg}</p>}
				<div className={styles.heroImage}>
					<Image src="/static/hero-image.png" width={700} height={400} />
				</div>

				{localCoffeeStores.length > 0 && (
					<div className={styles.sectionWrapper}>
						<h2 className={styles.heading2}>Stores near me...</h2>
						<div className={styles.cardLayout}>
							{localCoffeeStores.map((coffeeStore: CoffeeStore) => (
								<Card
									key={coffeeStore.id}
									name={coffeeStore.name}
									imgUrl={
										coffeeStore.imgUrl ||
										"https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"
									}
									href={`/coffee-store/${coffeeStore.id}`}
								/>
							))}
						</div>
					</div>
				)}

				{coffeeStores.length > 0 && (
					<div className={styles.sectionWrapper}>
						<h2 className={styles.heading2}>Berlin stores</h2>
						<div className={styles.cardLayout}>
							{coffeeStores.map((coffeeStore: CoffeeStore) => (
								<Card
									key={coffeeStore.id}
									name={coffeeStore.name}
									imgUrl={
										coffeeStore.imgUrl ||
										"https://images.unsplash.com/photo-1504753793650-d4a2b783c15e?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2000&q=80"
									}
									href={`/coffee-store/${coffeeStore.id}`}
								/>
							))}
						</div>
					</div>
				)}
			</main>
		</div>
	);
}

export default Home;
